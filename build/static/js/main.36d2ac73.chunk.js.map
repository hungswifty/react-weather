{"version":3,"sources":["components/weather.js","App.js","index.js"],"names":["refresh","window","location","reload","WeatherCard","weatherData","Grid","container","className","name","IconButton","aria-label","color","onClick","Autorenew","moment","format","weather","main","temp","humidity","Date","sys","sunrise","toLocaleTimeString","sunset","App","useState","lat","setLat","long","setLong","data","setData","useEffect","a","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetch","then","res","json","result","console","log","fetchData","ReactDOM","render","document","getElementById"],"mappings":"kSAMMA,EAAU,WACdC,OAAOC,SAASC,UAsCHC,EAnCK,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAH,OAClB,cAACC,EAAA,EAAD,CAAMC,WAAS,EAAf,SACE,sBAAKC,UAAU,OAAf,UACE,sBAAKA,UAAU,MAAf,UACE,mBAAGA,UAAU,SAAb,SAAuBH,EAAYI,OACnC,cAACC,EAAA,EAAD,CAAYC,aAAW,SAASC,MAAM,YAAYC,QAASb,EAA3D,SACE,cAACc,EAAA,EAAD,SAGJ,sBAAKN,UAAU,OAAf,UACE,oBAAGA,UAAU,MAAb,UACGO,MAASC,OAAO,QADnB,KAC6B,+BAAOD,MAASC,OAAO,WAEpD,mBAAGR,UAAU,cAAb,SAA4BH,EAAYY,QAAQ,GAAGC,UAGrD,sBAAKV,UAAU,OAAf,UACE,oBAAGA,UAAU,OAAb,yBAAiCH,EAAYa,KAAKC,KAAlD,YACA,oBAAGX,UAAU,OAAb,uBAA+BH,EAAYa,KAAKE,SAAhD,WAGF,sBAAKZ,UAAU,OAAf,UACE,oBAAGA,UAAU,iBAAb,qBACW,IACR,IAAIa,KAA+B,IAA1BhB,EAAYiB,IAAIC,SAAgBC,mBAAmB,YAE/D,oBAAGhB,UAAU,iBAAb,oBACU,IACP,IAAIa,KAA8B,IAAzBhB,EAAYiB,IAAIG,QAAeD,mBAAmB,qB,MClCvD,SAASE,IAAO,IAAD,EACNC,mBAAS,IADH,mBACrBC,EADqB,KAChBC,EADgB,OAEJF,mBAAS,IAFL,mBAErBG,EAFqB,KAEfC,EAFe,OAGJJ,mBAAS,IAHL,mBAGrBK,EAHqB,KAGfC,EAHe,KA0B5B,OAlBAC,qBAAU,YACO,uCAAG,sBAAAC,EAAA,6DAChBC,UAAUC,YAAYC,oBAAmB,SAASC,GAChDV,EAAOU,EAASC,OAAOC,UACvBV,EAAQQ,EAASC,OAAOE,cAHV,SAKVC,MAAM,GAAD,OARW,0CAQX,iEATW,qCAYnBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJd,EAAQc,GACRC,QAAQC,IAAIF,MAXA,2CAAH,qDAcfG,KACC,CAACtB,EAAKE,IAGP,qBAAKtB,UAAU,MAAf,SACuB,oBAAbwB,EAAKd,KACX,cAAC,EAAD,CAASb,YAAa2B,IAEtB,0BC9BRmB,IAASC,OAAO,cAAC1B,EAAD,IAAS2B,SAASC,eAAe,W","file":"static/js/main.36d2ac73.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./styles.css\";\r\nimport moment from \"moment\";\r\nimport { IconButton, Grid } from \"@material-ui/core\";\r\nimport { Autorenew as AutorenewIcon } from \"@material-ui/icons\";\r\n\r\nconst refresh = () => {\r\n  window.location.reload();\r\n};\r\n\r\nconst WeatherCard = ({ weatherData }) => (\r\n  <Grid container>\r\n    <div className=\"main\">\r\n      <div className=\"top\">\r\n        <p className=\"header\">{weatherData.name}</p>\r\n        <IconButton aria-label=\"Delete\" color=\"secondary\" onClick={refresh}>\r\n          <AutorenewIcon />\r\n        </IconButton>\r\n      </div>\r\n      <div className=\"flex\">\r\n        <p className=\"day\">\r\n          {moment().format(\"dddd\")}, <span>{moment().format(\"LL\")}</span>\r\n        </p>\r\n        <p className=\"description\">{weatherData.weather[0].main}</p>\r\n      </div>\r\n\r\n      <div className=\"flex\">\r\n        <p className=\"temp\">Temprature: {weatherData.main.temp} &deg;C</p>\r\n        <p className=\"temp\">Humidity: {weatherData.main.humidity} %</p>\r\n      </div>\r\n\r\n      <div className=\"flex\">\r\n        <p className=\"sunrise-sunset\">\r\n          Sunrise:{\" \"}\r\n          {new Date(weatherData.sys.sunrise * 1000).toLocaleTimeString(\"en-IN\")}\r\n        </p>\r\n        <p className=\"sunrise-sunset\">\r\n          Sunset:{\" \"}\r\n          {new Date(weatherData.sys.sunset * 1000).toLocaleTimeString(\"en-IN\")}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  </Grid>\r\n);\r\n\r\nexport default WeatherCard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Weather from \"./components/weather\";\r\nimport \"./style.css\";\r\n\r\nexport default function App() {\r\n  const [lat, setLat] = useState([]);\r\n  const [long, setLong] = useState([]);\r\n  const [data, setData] = useState([]);\r\n\r\n  const REACT_APP_API_KEY = \"9f19142d24f7fb28a382af07a45407fd\";\r\n  const REACT_APP_API_URL = \"https://api.openweathermap.org/data/2.5\";\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      navigator.geolocation.getCurrentPosition(function(position) {\r\n        setLat(position.coords.latitude);\r\n        setLong(position.coords.longitude);\r\n      });\r\n      await fetch(\r\n        `${REACT_APP_API_URL}/weather/?lat=21.0277&lon=105.7671&units=metric&APPID=${REACT_APP_API_KEY}`\r\n      )\r\n        .then(res => res.json())\r\n        .then(result => {\r\n          setData(result);\r\n          console.log(result);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [lat, long]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {typeof data.main != \"undefined\" ? (\r\n        <Weather weatherData={data} />\r\n      ) : (\r\n        <div />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}